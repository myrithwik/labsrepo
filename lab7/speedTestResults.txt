InsertInOrder(1000): class ULLMap: 0.02 sec
                     class BSTMap: 0.02 sec
                     Java's Built-in TreeMap: 0.00 sec
                     Java's Built-in HashMap: 0.00 sec
InsertInOrder(5000): class ULLMap: 0.21 sec
                     class BSTMap: 0.14 sec
                     Java's Built-in TreeMap: 0.01 sec
                     Java's Built-in HashMap: 0.00 sec
InsertInOrder(10000):class ULLMap: 0.77 sec
                     class BSTMap: 0.62 sec
                     Java's Built-in TreeMap: 0.01 sec
                     Java's Built-in HashMap: 0.01 sec
InsertInOrder(50000):--Stack Overflow -- couldn't add 50000 strings.
                     class BSTMap: 12.05 sec
                     Java's Built-in TreeMap: 0.07 sec
                     Java's Built-in HashMap: 0.03 sec

InsertRandom(1000):class ULLMap: 0.01 sec
                   class BSTMap: 0.00 sec
                   Java's Built-in TreeMap: 0.00 sec
InsertRandom(5000):class ULLMap: 0.09 sec
                   class BSTMap: 0.00 sec
                   Java's Built-in TreeMap: 0.00 sec
InsertRandom(10000):class ULLMap: 0.28 sec
                    class BSTMap: 0.00 sec
                    Java's Built-in TreeMap: 0.00 sec
InsertRandom(50000):--Stack Overflow -- couldn't add 50000 strings of length 1.
                    class BSTMap: 0.01 sec
                    Java's Built-in TreeMap: 0.01 sec

Most efficient is the built-in HashMap. The BSTMap and Built-in TreeMap have the same runtime when we add in random order.